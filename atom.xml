<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://mkitclear.github.io</id>
    <title>Gridea</title>
    <updated>2021-02-08T15:33:06.814Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://mkitclear.github.io"/>
    <link rel="self" href="https://mkitclear.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://mkitclear.github.io/images/avatar.png</logo>
    <icon>https://mkitclear.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Git 学习笔记]]></title>
        <id>https://mkitclear.github.io/post/git-xue-xi-bi-ji/</id>
        <link href="https://mkitclear.github.io/post/git-xue-xi-bi-ji/">
        </link>
        <updated>2021-02-07T17:06:41.000Z</updated>
        <content type="html"><![CDATA[<p>廖雪峰老师<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">Git教程</a>真的很不错，花了大概两三个小时过了一遍,受益良多，以记之。</p>
<ul>
<li><a href="https://git-scm.com/book/zh">Git中文手册</a></li>
</ul>
<p>本文不再介绍 Git 的安装配置过程和基本的 linux 命令操作。</p>
<h2 id="初始化仓库">初始化仓库</h2>
<ul>
<li>
<p>首先建一个目录 learngit ，在终端进入到该目录下</p>
</li>
<li>
<p>然后通过<code>git init</code>命令把这个目录变成Git可以管理的仓库</p>
</li>
</ul>
<pre><code class="language-纯文本">$ git init  #初始化仓库
</code></pre>
<h2 id="把文件添加到版本库">把文件添加到版本库</h2>
<p>创建一个 readme.txt,放在 learngit 目录下(或者子目录)</p>
<pre><code class="language-纯文本">$ vim readme.txt
</code></pre>
<table>
<thead>
<tr>
<th>Vim</th>
<th>快捷键说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Esc</td>
<td>退出编辑,跳到命令模式</td>
</tr>
<tr>
<td>:w</td>
<td>保存文件但不退出 vim</td>
</tr>
<tr>
<td>:w!</td>
<td>强制保存,不退出 vim</td>
</tr>
<tr>
<td>:wq</td>
<td>保存文件并退出 vim</td>
</tr>
<tr>
<td>:q</td>
<td>不保存文件,退出 vim</td>
</tr>
<tr>
<td>:q!</td>
<td>不保存文件,强制退出 vim</td>
</tr>
<tr>
<td>:e!</td>
<td>放弃所有修改,从上次保存文件开始再编辑</td>
</tr>
</tbody>
</table>
<h3 id="1把文件添加到暂存区">1.把文件添加到暂存区</h3>
<p>使用<code>git add file_name</code></p>
<pre><code class="language-纯文本">$ git add readme.txt
</code></pre>
<h4 id="一次添加多个文件">一次添加多个文件</h4>
<pre><code class="language-纯文本">$ git add *.txt
</code></pre>
<h4 id="一次添加所有文件">一次添加所有文件</h4>
<pre><code class="language-纯文本">$ git add --all
or
$ git add .
</code></pre>
<blockquote>
<p><code>git add --all</code> 和 <code>git add .</code> 都可以把「所有改动（增删改）」添加到暂存区，区别是 <code>git add .</code>只会添加当前 **目录（包括子目录）**下的所有改动，<code>git add --all</code>在任何目录下操作都可以添加当前  <strong>工作区</strong>  的所有改动。</p>
</blockquote>
<h3 id="2把文件提交到版本库">2.把文件提交到版本库</h3>
<pre><code class="language-纯文本">$ git commit -m &quot;wrote a readme file&quot; 
</code></pre>
<p><code>-m &quot;wrote a readme file&quot;</code>是说明本次 commit 你做了什么事情，简要描述清楚即可（重点是描述清楚，中、英文不限）。</p>
<blockquote>
<p><code>git commit</code> 指定文件的时候会直接提交 <strong>工作区</strong> 的文件,不指定文件的时候提交的是**缓存区****<code>stage</code>**<strong>的所有文件</strong></p>
</blockquote>
<pre><code class="language-纯文本">$ git commit readme.txt -m &quot;commit message&quot;
</code></pre>
<h3 id="查看git安装目录">查看Git安装目录</h3>
<pre><code class="language-纯文本">$ where git # Windows
$ which git # Mac
</code></pre>
<h2 id="时光穿梭机">时光穿梭机</h2>
<h3 id="版本退回">版本退回</h3>
<pre><code class="language-纯文本">git reset --hard commit_id    # 该操作会在`git reflog`中生成记录
</code></pre>
<ul>
<li>
<p>Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code></p>
</li>
<li>
<p>Git的<code>commit_d</code>(版本号)是一个十六进制的用SHA1计算出来的数字</p>
</li>
<li>
<p>在Git中用<code>HEAD</code>表示当前版本,前一个版本就是<code>HEAD^</code>,前一百个版本写成<code>HEAD~100</code></p>
</li>
<li>
<p>使用<code>git reset --hard HEAD^</code>命令退回上一个版本</p>
</li>
<li>
<p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本</p>
</li>
<li>
<p>使用<code>git log --pretty=oneline</code>让记录单行显示</p>
</li>
<li>
<p>使用<code>git log</code>或<code>git reflog</code> 加<code>file_name</code>查看指定文件的历史</p>
</li>
<li>
<p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本</p>
</li>
<li>
<p>Git 提供一个命令<code>git reflog</code>来记录你的每一次命令,这样就可以找到所有版本的<code>commit id</code></p>
</li>
</ul>
<hr>
<h3 id="工作区和暂存区">工作区和暂存区</h3>
<ul>
<li><strong>工作区(Working Directory)</strong></li>
</ul>
<p>你在电脑里能看到的目录</p>
<ul>
<li><strong>版本库(Repository)</strong></li>
</ul>
<p>工作区有一个隐藏目录<code>.git</code>,这个不算工作区,而是Git的版本库.我们可以称它为<em>Repo</em></p>
<p><em>Repo</em>里存放了很多东西,其中最重要的就是暂存区<code>stage</code>(或者叫index),还有Git为我们自动创建的第一个分支(<code>Branch</code>)<code>master</code>.以及指向<code>master</code>的一个指针叫<code>HEAD</code>.</p>
<figure data-type="image" tabindex="1"><img src="http://upload-images.jianshu.io/upload_images/265298-7282add6911d3710?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" loading="lazy"></figure>
<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<p>第一步是用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区；</p>
<p>第二步是用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p>
<h4 id="掌握仓库当前的状态">掌握仓库当前的状态</h4>
<pre><code class="language-纯文本">$ git status
</code></pre>
<h4 id="查看修改内容">查看修改内容</h4>
<p>下面是关于 <code>git diff</code>的一些使用区别</p>
<p>[图片上传失败...(image-c72280-1547095525316)]</p>
<p>另外可以使用<code>git diff commit_id_1 commit_id_2</code>比较两个不同版本的区别</p>
<h3 id="撤销修改">撤销修改</h3>
<ul>
<li>
<p><strong>场景1</strong>：当你改乱了<strong>工作区</strong>某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file_name</code></p>
</li>
<li>
<p>可以用<code>git checkout -- *</code>丢弃所有工作区文件的修改</p>
</li>
<li>
<p><strong>场景2</strong>：当你不但改乱了工作区某个文件的内容，还添加到了<strong>暂存区</strong>时，想丢弃修改，分两步</p>
</li>
<li>
<p>第一步用命令<code>git reset HEAD file_name</code>就回到了<strong>场景1</strong></p>
</li>
<li>
<p>使用<code>git reset HEAD</code>丢弃所有暂存区的修改</p>
</li>
<li>
<p>第二步按<strong>场景1</strong>操作</p>
</li>
<li>
<p><strong>场景3</strong>：已经提交了不合适的修改到版本库时，想要撤销本次提交，<code>git reset --hard HEAD</code>，不过前提是没有推送到远程库。</p>
</li>
</ul>
<p>注意:使用版本退回操作<code>git reset --hard</code>会导致所有暂存区和工作区的当前修改但未 commit 的内容全部丢弃.。</p>
<h3 id="文件名里有空格和的情况">文件名里有空格和()的情况</h3>
<p>Git命令（或者所有的shell命令中）中出现括“（）”时系统把它看做一个有特殊意义的命令从而尝试去执行它。</p>
<p>因此如果文件名中出现括号，系统找不到括号里要执行的命令就会报错。</p>
<p>我们要让系统忽略括号的特殊意义，方法是用“”双引号把文件名括起来，或者用转义符将括号转义.</p>
<p>例如文件名为git (1).md</p>
<p>以下的写法都是可以的:</p>
<p><code>git add &quot;git (1).md&quot;</code></p>
<p><code>git add git&quot; &quot;\(1\).md</code></p>
<p><code>git add git&quot; (1)&quot;.md</code></p>
<h3 id="删除文件">删除文件</h3>
<p>使用<code>rm file_name</code>删除本地文件</p>
<p>使用<code>git add file_name</code>==<code>git rm file_name</code>提交删除到暂存区</p>
<p>使用<code>git commit -m &quot;commit msg&quot;</code>提交到本地库</p>
<p><strong>注意:</strong> 可以直接使用<code>git rm file_name</code>删除本地文件以及提交删除到暂存区,但仅用于暂存区有此本地文件的情况</p>
<h2 id="远程仓库">远程仓库</h2>
<p>注册GitHub账号</p>
<p>由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：</p>
<ul>
<li>第1步：创建SSH Key</li>
</ul>
<pre><code class="language-纯文本">$ ssh-keygen -t rsa -C  &quot;youremail@example.com&quot;
</code></pre>
<p>然后在用户主目录里找到<code>.ssh</code>目录,里面有<code>id_rsa</code>和<code>id_rsa.pub</code>两个文件<code>id_rsa</code>是私钥,<code>id_rsa.pub</code>是公钥.</p>
<blockquote>
<p><code>cd ~</code>进入用户主目录</p>
</blockquote>
<p><code>cat ~/.ssh/id_rsa.pub</code>看到id_rsa.pub文件的内容</p>
<ul>
<li>第2步：登陆GitHub</li>
</ul>
<blockquote>
<p>打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容</p>
</blockquote>
<h3 id="添加远程库">添加远程库</h3>
<ul>
<li>要关联一个远程库，使用命令</li>
</ul>
<pre><code class="language-纯文本">git remote add origin git@server_name:path/repo_name.git
</code></pre>
<p>这里使用的命令是</p>
<p><code>git remote add origin git@github.com:HuChanghong/learngit.git</code></p>
<ul>
<li>
<p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容</p>
</li>
<li>
<p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改</p>
</li>
</ul>
<blockquote>
<p>ssh不行是因为你没有设置ssh秘钥</p>
</blockquote>
<p>4: 用<code>ssh -T git@github.com</code> 判断是否绑定成功。如果返回successfully 表示成功</p>
<h3 id="从远程库克隆">从远程库克隆</h3>
<ul>
<li>要克隆一个仓库，首先必须知道仓库的地址，然后使用<code>git clone</code>命令克隆。</li>
</ul>
<pre><code class="language-纯文本">git clone git@github.com:username/reponame.git
</code></pre>
<ul>
<li>Git支持多种协议，包括<code>https</code>，但通过<code>ssh</code>支持的原生<code>git</code>协议速度最快。</li>
</ul>
<h3 id="取消远程链接">取消远程链接</h3>
<ul>
<li>
<p>查看本地库关联了那些远程库<code>git remote -v</code></p>
</li>
<li>
<p>取消本地目录下关联的远程库<code>git remote rm origin</code></p>
</li>
<li>
<p>此处<code>origin</code>是指你创建与远程库的链接的时候所使用的名字</p>
</li>
</ul>
<h2 id="分支管理">分支管理</h2>
<h3 id="创建与合并分支">创建与合并分支</h3>
<ul>
<li>
<p>查看分支：<code>git branch</code></p>
</li>
<li>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
</li>
<li>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
</li>
<li>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
</li>
<li>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
</li>
<li>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
</li>
</ul>
<h3 id="解决冲突">解决冲突</h3>
<ul>
<li>
<p>当Git无法自动合并分支时，就必须首先解决冲突。</p>
</li>
<li>
<p>解决冲突后，再提交，合并完成。</p>
</li>
<li>
<p>解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。</p>
</li>
<li>
<p>用git log --graph命令可以看到分支合并图。</p>
</li>
</ul>
<blockquote>
<p><code>git merge branch_name</code>提示 <code>conflictgit status</code>查看冲突的文件打开这个文件,修改保存用带参数的git log也可以看到分支的合并情况：<code>git log --graph --pretty=oneline --abbrev-commit</code>最后删除不需要的分支</p>
</blockquote>
<h3 id="分支管理策略">分支管理策略</h3>
<blockquote>
<p>在实际开发中，我们应该按照几个基本原则进行分支管理：首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
</blockquote>
<p>因为本次合并要创建一个新的commit，所以加上<code>-m</code>参数，把commit描述写进去</p>
<pre><code class="language-纯文本">git merge --no-ff -m &quot;balabala&quot; branch_name
</code></pre>
<h3 id="bug分支">Bug分支</h3>
<blockquote>
<p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p>
</blockquote>
<p>Git提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作</p>
<pre><code class="language-纯文本">git stash
</code></pre>
<p>我理解的<code>stash</code>,就像是把当前的<code>WIP</code>压栈(这里<code>WIP</code>的含义就是所有修改了但未commit的数据)然后再一个一个取出来,默认的<code>git stash pop</code>是按照自栈顶开始的顺序依次出栈,也可以使用<code>git stash pop stash@{num}</code>的方式取出指定的<code>WIP</code></p>
<p>我们可以用<code>git stash list</code>查看当前压栈了多少个<code>WIP</code></p>
<p><strong>注意:</strong><code>git stash</code>不能将未被追踪的文件(untracked file)压栈,也就是从未被<code>git add</code>过的文件,也就是你在使用<code>git status</code>命令看到的提示<code>Untracked files</code>所列出的文件,所以在<code>git stash</code>之前一定要用<code>git status</code>确认没有<code>Untracked files</code><strong>另外</strong>在有<code>WIP</code>没有<code>commit</code> 或者<code>stash</code>的情况下是无法切换分支的</p>
<h3 id="feature分支">Feature分支</h3>
<ul>
<li>
<p>开发一个新feature，最好新建一个分支；</p>
</li>
<li>
<p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除</p>
</li>
</ul>
<h3 id="多人协作">多人协作</h3>
<p>多人协作的工作模式通常是这样：</p>
<ul>
<li>
<p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；* 如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；* 如果合并有冲突，则解决冲突，并在本地提交；* 没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！* 如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to=origin/&lt;branch-name&gt; &lt;branch-name&gt;</code>。* 这就是多人协作的工作模式，一旦熟悉了，就非常简单。</p>
</li>
<li>
<p>查看远程库信息，使用<code>git remote -v</code>；</p>
</li>
<li>
<p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
</li>
<li>
<p>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</p>
</li>
<li>
<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>
</li>
<li>
<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream-to=origin/branch-name branch-name</code>；</p>
</li>
<li>
<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>
</li>
</ul>
<h3 id="rebase">rebase</h3>
<p>这是git文档强调的使用注意情形和原则</p>
<blockquote>
<p>只对尚未推送或分享给别人的本地修改执行<code>rebase</code>操作清理历史；从不对已推送至别处的提交执行<code>rebase</code>操作<code>git rebase</code>会把你的<code>my work</code>分支里的每个提交<code>commit</code>取消掉，并且把它们临时 保存为补丁<code>patch</code>(这些补丁放到&quot;.git/rebase&quot;目录中),然后把<code>mywork</code>分支更新 到最新的<code>origin</code>分支，最后把保存的这些补丁应用到<code>mywork</code>分支上。当<code>mywork</code>分支更新之后，它会指向这些新创建的提交<code>commit</code>,而那些老的提交会被丢弃。 如果运行垃圾收集命令<code>pruning garbage collection</code>, 这些被丢弃的提交就会删除.</p>
</blockquote>
<blockquote>
<p>当<code>mywork</code>分支更新之后，它会指向这些新创建的提交<code>commit</code>,而那些老的提交会被丢弃。 如果运行垃圾收集命令<code>pruning garbage collection</code>, 这些被丢弃的提交就会删除.</p>
</blockquote>
<h2 id="标签管理">标签管理</h2>
<blockquote>
<p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。</p>
</blockquote>
<p><em>类似IP和域名的关系</em></p>
<h3 id="创建标签">创建标签</h3>
<ul>
<li>
<p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个<code>commit id</code>；</p>
</li>
<li>
<p><code>git tag tag_name commit_id</code></p>
</li>
<li>
<p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p>
</li>
<li>
<p>用<code>-a</code>指定标签名，<code>-m</code>指定说明文字</p>
</li>
<li>
<p>命令<code>git tag</code>可以查看所有标签。</p>
</li>
<li>
<p><code>git show tag_name</code>查看标签信息</p>
</li>
</ul>
<h3 id="操作标签">操作标签</h3>
<p>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</p>
<h2 id="关联多个远程库">关联多个远程库</h2>
<blockquote>
<p>使用多个远程库时，我们要注意，<code>git</code>给远程库起的默认名称是<code>origin</code>，如果有多个远程库，我们需要用不同的名称来标识不同的远程库。</p>
</blockquote>
<p>如果本地库已经关联了<code>origin</code>的远程库，并且，该远程库指向<code>GitHub</code>。我们可以删除已有的<code>GitHub</code>远程库</p>
<pre><code class="language-纯文本">git remote rm origin
</code></pre>
<p>使用如下命令关联远程库</p>
<pre><code class="language-纯文本">git remote add remote_name git@server_name:path/repo_name.git
</code></pre>
<p>例如要关联<code>Github</code>远程库</p>
<pre><code class="language-纯文本">git remote add github git@github.com:Github_id/repo_name.git
</code></pre>
<p>再比如要关联<code>码云</code>远程库</p>
<pre><code class="language-纯文本">git remote add gitee git@gitee.com:Github_id/repo_name.git
</code></pre>
<p>此时要推送到不同的远程库则代码中使用对应的远程库名称(<code>remote_name</code>)</p>
<pre><code class="language-纯文本">git push remote_name master
</code></pre>
<h2 id="自定义git">自定义Git</h2>
<h3 id="忽略特殊文件">忽略特殊文件</h3>
<blockquote></blockquote>
<p><strong>忽略文件的原则是：</strong></p>
<ol>
<li>
<p>忽略操作系统自动生成的文件，比如缩略图等；</p>
</li>
<li>
<p>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件；</p>
</li>
<li>
<p>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</p>
</li>
</ol>
<p>可以用<code>git add -f</code>强制添加被<code>gitignore</code>的文件</p>
<p>可以用<code>git check-ignore</code>命令检查是什么规则导致的无法添加文件</p>
<pre><code class="language-纯文本">git check-ignore -v file_name
</code></pre>
<p><strong>注意:</strong><code>.gitignore</code>文件本身要放到版本库里，并且可以对<code>.gitignore</code>做版本管理！</p>
<h3 id="配置别名">配置别名</h3>
<pre><code class="language-纯文本">st = status
  co = checkout
  br = branch
  cm = commit
  unstage = reset HEAD
  last = log -1
  lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit
</code></pre>
<p>配置Git的时候，加上<code>--global</code>是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。每个仓库的Git配置文件都放在<code>.git/config</code>文件,打开配置文件,别名就在<code>[alias]</code>后面，要删除别名，直接把对应的行删掉即可当前用户的Git配置文件放在<code>用户主目录</code>下的一个隐藏文件<code>.gitconfig</code>中</p>
<p>查看用户的配置信息使用<code>git config --global --list</code>命令</p>
<p>查看当前仓库的配置信息使用<code>git config --local --list</code>命令</p>
<h4 id="删除别名">删除别名</h4>
<p>命令删除一个已定义的别名 <code>git config --global --unset alias.ci</code></p>
<p><code>cd .git</code> <code>vim config</code>打开对应的配置文件,别名就在<code>[alias]</code>后面，直接把对应的行删掉即可</p>
<blockquote>
<p>gitconfig配置文件的读取顺序：<br>
linux中类似用户的配置文件一样有3层，系统级，用户级，项目级。<br>
windows也基本一样，但常常只存在于是用户根目录(C:\User\xxx)，项目目录中。 最下层的覆盖上面的，alias配置也在其中，手动改配置文件也和命令一样。 加了--global选项的，表示配置写到了用户级，--system是系统级，win是在安装目录（如C:\Program Files\Git\mingw64\etc），不加就在项目级</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://mkitclear.github.io/post/hello-gridea/</id>
        <link href="https://mkitclear.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>